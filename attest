#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const docopt = require('@eyalsh/docopt').default;
const mustache = require('mustache');

// disable all escaping as we want plaintext output from mustache
mustache.escape = (s) => s;

const Defaults = Object.freeze({
  templateFilePath: path.join(__dirname, 'template'),
  extraDataBitsize: 4096,
  encoding: 'utf8',
  algo: 'SHA256',
  outputPath: './',
  extraDataWrapAt: 120
});

const doc = `
Create Proof-of-Ownership attestation. The resulting file's name will contain the attestation's hash.

Usage:
  ${path.parse(__filename).base} --name=<n> --email=<e> --home=<h> --desc=<d> --domain=<d>
    [--template=<file>] [--extraData=<bits>] [--encoding=<enc>] [--algo=<a>] [--outPath=<o>]

Required:
  --name=<n>          The owner's name.
  --email=<e>         The owner's email.
  --home=<h>          The location at which the resulting attestation will be housed in perpetuity.
  --desc=<d>          The owned artifact's description.
  --domain=<d>        The owned artifact's fully-qualified domain name (FQDN).

Optional:
  --template=<file>   Use 'file' as the Mustache-formatted template document. [default: ${Defaults.templateFilePath}]
  --extraData=<bits>  Use 'bits' bits as the size of the appended extra data ("key"). [default: ${Defaults.extraDataBitsize}]
  --encoding=<enc>    Use 'enc' as the data encoding. [default: ${Defaults.encoding}]
  --algo=<a>          Use 'a' as the hashing algorithm. [default: ${Defaults.algo}]
  --outPath=<o>       Use 'o' as the output path for resulting attestation file. [default: ${Defaults.outputPath}]
`;

class InternalError extends Error {
  constructor (wrappedErr) {
    super(wrappedErr);
  }
}

function main (args) {
  try {
    const template = fs.readFileSync(path.resolve(args.template)).toString(args.encoding);
    const uniqueData = crypto.randomBytes(Math.floor(args.extraData / 8));

    const { name, email, desc, domain, home } = args;

    const splitter = (s) => {
      const ret = [];

      for (let i = 0; i < s.length; i += Defaults.extraDataWrapAt) {
        ret.push(s.slice(i, i + Defaults.extraDataWrapAt));
      }

      return ret.join('\n');
    };

    const sha256 = crypto.createHash(args.algo).update(
      fs.readFileSync(path.resolve(__filename))
    ).digest('hex');

    const templateObj = {
      owner: { name, email },
      owned: { desc, domain },
      attest: {
        home,
        uniqueDataBase64: splitter(uniqueData.toString('base64')),
        date: new Date().toLocaleString(),
        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,
        package: require('./package.json'),
        hash: {
          algo: args.algo,
          hex: sha256
        }
      }
    };

    const attestation = mustache.render(template, templateObj);
    const attestHash = crypto.createHash(args.algo)
      .update(attestation, args.encoding)
      .digest('hex');

    const outPath = path.resolve(path.join(args.outPath, `${attestHash}_${args.algo}.txt`));
    fs.writeFileSync(outPath, attestation, { encoding: args.encoding });

    console.log(`${args.algo} ${attestHash}`);
    console.log(`Wrote "${outPath}"`);
  } catch (err) {
    if (err.code === 'ENOENT') {
      throw new Error(`Template file "${args.template}" was not found!`);
    }

    throw new InternalError(err);
  }
}

try {
  main(Object.entries(docopt(doc)).reduce((a, [k, v]) => ({ [k.replace(/\-/g, '')]: v, ...a}), {}));
} catch (err) {
  if (err instanceof InternalError) {
    console.error(err);
  }
  else {
    console.log(err.message);
  }
}
